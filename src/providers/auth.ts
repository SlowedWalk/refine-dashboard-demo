import { AuthBindings } from "@refinedev/core";
import { API_URL, dataProvider } from "./data";
import { User } from "@/graphql/schema.types";

export const authCredentials = {
    email: "michael.scott@dundermifflin.com",
    password: "demodemo",
  };

export const authProvider: AuthBindings = {
    login: async ({ email }) => {
        try {
            // call the login mutation
            // dataProvider.custom is used to make a request to GraphQL API
            // this will call dataProvider which will go through the fetchWrapper function
            const { data } = await dataProvider.custom({
                url: API_URL,
                method: "post",
                headers: {},
                meta: {
                    variables: { email },
                    // pass the email to see if the user exists and if so, return the accesToken
                    rawQuery: `
                        mutation Login($email: String!) {
                            login(loginInput: { email: $email }) {
                                accessToken,
                            }
                        }
                    `,
                },
            });

            // save the accesToken in localStorage
            localStorage.setItem("access_token", data.login.accessToken)

            return {
                success: true,
                redirectTo: "/",
            }
        } catch (err) {
            const error = err as Error;

            return {
                success: false,
                error: {
                    message: "message" in error ? error.message : "login failed",
                    name: "name" in error ? error.name : "Invalide email or password"
                }
            };
        }
    },

    logout: async () => {
        localStorage.removeItem('access_token');

        return {
            success: true,
            redirectTo: "/login"
        }
    },

    onError: (error) => {
        // a check to see if the error is an authentication error
        // if so, set logout to true
        if (error.statusCode === "UNAUTENTICATED") {
            return {
                logout: true,
                ...error
            };
        }

        return { error };
    },

    check: async () => {
        try {
            // get the identity of the user
            // this is ti know if the user is authenticated or not
            await dataProvider.custom({
                url: API_URL,
                method: "post",
                headers: {},
                meta: {
                    rawQuery: `
                        query Me {
                            me {
                                name
                            }
                        }
                    `
                }
            });
            // if the user is authenticated, redirect to the home page
            return {
                authenticated: true,
                redirectTo: "/"
            };
        } catch (error) {
            // for any other error, redirect to the login page
            return {
                authenticated: false,
                redirectTo: "/login"
            }
        }
    },

    // get the user information
    getIdentity: async () => {
        const accessToken = localStorage.getItem('access_token');

        try {
            // call the GraphQL API to get user information
            // we're using me:any because the GraghQL API doesn't have a type for the me query yet.
            // we'll add some queries and mutations later and change this ti User which will be generated by cc
            const { data } = await dataProvider.custom<{ me: any }>({
                url: API_URL,
                method: "post",
                headers: accessToken
                    ? { Authorization: `Bearer ${accessToken}` } // send the accessToken in the Authorization header
                    : {},
                meta: {
                    // get the user information such as name, email, etc.
                    rawQuery: `
                        query Me {
                            me {
                                id,
                                name,
                                email,
                                phone,
                                jobTitle,
                                timezone,
                                avatarUrl
                            }
                        }
                    `
                }
            });
            return data.me;
        } catch (error) {
            return undefined;
        }
    }
};